library(data.table)
library(tidyverse)
library(diffloop)
"%ni%" <- Negate("%in%")
# Read in phewas table
# Read in phewas table
phewas_table <- fread("../../output/rare_variants/phewas/phewas_sig_phenos.tsv")
splits <- str_split_fixed(phewas_table$var,":",4)
phewas_table$pos <- paste(splits[,1],splits[,2],sep=":")
# Read in rare variants
if (FALSE){
rare_vars <- readxl::read_xlsx("../../data/ukbb-rare/annotations_rare_vars_updated.xlsx") %>% mutate(pheno = toupper(pheno)) %>%
dplyr::rename(rsid = "rsID") %>% mutate(ref = str_split_fixed(ref_alt,"/",2)[,1],mut = str_split_fixed(ref_alt,"/",2)[,2]) %>%
dplyr::select(-(ref_alt)) %>% mutate(chr = ifelse(is.na(chr),"X",chr)) %>% as.data.frame()
write.table(rare_vars,file="../../data/ukbb-rare/annotations_rare_vars_updated.tsv",quote = FALSE, sep = "\t", col.names = T, row.names = F)
}
rare_vars <- fread("../../data/ukbb-rare/annotations_rare_vars_updated.tsv")
# See how many variants are reported in GWAS Catalog
gwas <- data.frame(fread(paste0("zcat < ", "../../data/annotations/gwas_catalog_v1.0-associations_e93_r2019-01-31.tsv.gz"), sep = "\t", header = TRUE))
gwas$CHR_POS <- as.numeric(as.character(gwas$CHR_POS))
gwas_gr <- makeGRangesFromDataFrame(gwas[complete.cases(gwas),], seqnames.field = "CHR_ID", start.field = "CHR_POS", end.field = "CHR_POS")
# Rename blood traits from gwas catalog
unique(rare_vars$pheno)
gwas %>% filter(SNPS %in% unique(rare_vars$rsid)) %>% dplyr::select(SNPS, DISEASE.TRAIT) %>% .$DISEASE.TRAIT %>% unique() %>% sort()
conversion <- c("Basophil percentage of granulocytes" = "BASO_P","Basophil percentage of white cells" = "BASO_P",
"Eosinophil counts"="EO","Eosinophil percentage of white cells"="EO_P","Eosinophil percentage of granulocytes"="EO_P",
"Hemoglobin concentration"="HGB","High light scatter reticulocyte count" ="HLR",
"High light scatter reticulocyte percentage of red cells" = "HLR_P",
"Immature fraction of reticulocytes" = "IRF","Lymphocyte counts" = "LYMPH",
"Lymphocyte percentage of white cells" = "LYMPH_P",
"Mean corpuscular hemoglobin" ="MCH","Mean corpuscular hemoglobin concentration" ="MCHC",
"Mean corpuscular volume" ="MCV","Mean platelet volume" ="MPV","Monocyte count"="MONO",
"Monocyte percentage of white cells" = "MONO_P", "Neutrophil count"  = "NEUT",
"Neutrophil percentage of granulocytes"="NEUT_P","Neutrophil percentage of white cells" = "NEUT_P",
"Platelet count" = "PLT","Platelet distribution width" = "PDW","Plateletcrit" = "PCT",
"Red blood cell count" = "RBC","Red cell distribution width"  = "RDW_CV",
"Reticulocyte count"="RET","Reticulocyte fraction of red cells" = "RET_P",
"Low white blood cell count" = "WBC",
"White blood cell count" ="WBC","White blood cell count (basophil)"  = "BASO",
"White blood cell count (monocyte)" = "MONO", "White blood cell count (neutrophil)" = "NEUT")
dict <- data.frame(conversion) %>% rownames_to_column() %>% dplyr::rename("DISEASE.TRAIT"="rowname") %>% mutate(DISEASE.TRAIT = as.character(DISEASE.TRAIT))
# How many SNP-blood trait associations have been previously reported?
gwas %>% filter(SNPS %in% unique(merged$ID), DISEASE.TRAIT %in% names(conversion)) %>%
left_join(.,dict, by = "DISEASE.TRAIT") %>% dplyr::select(-DISEASE.TRAIT) %>%
left_join(.,rare_vars[,c("rsid","pheno")],by=c("SNPS"="rsid")) %>%
filter(conversion == pheno) %>% .$SNPS %>% unique %>% length
# How many SNP-blood trait associations have been previously reported?
gwas %>% filter(DISEASE.TRAIT %in% names(conversion)) %>%
left_join(.,dict, by = "DISEASE.TRAIT") %>% dplyr::select(-DISEASE.TRAIT) %>%
left_join(.,rare_vars[,c("rsid","pheno")],by=c("SNPS"="rsid")) %>%
filter(conversion == pheno) %>% .$SNPS %>% unique %>% length
head(gwas)
# How many variants have previously unreported pheWAS associations?
gwas %>% filter(SNPS %in% phewas_table$ID) %>% dplyr::select(SNPS, DISEASE.TRAIT) %>%
filter(DISEASE.TRAIT %ni% dict$DISEASE.TRAIT) -> known_associations
# Then manually check how many of these associations are found in phewas_table
known_associations
phewas_table %>% filter(ID %in% known_associations$SNPS)
phewas_table %>% filter(pval < 5e-8) %>% dim()
# Plot most severe coding consequences
coding_consequences <- c("missense_variant","frameshift_variant",
"splice_acceptor_variant","splice_donor_variant","splice_region_variant",
"inframe_insertion","stop_gained","stop_retained_variant",
"start_lost","stop_lost","coding_sequence_variant","incomplete_terminal_codon_variant")
coding_con<- rare_vars %>% dplyr::select(var, VEP_cons_most_serious) %>%
filter(VEP_cons_most_serious %in% coding_consequences) %>% distinct() %>%
group_by(VEP_cons_most_serious) %>% summarise(Freq=n()) %>% arrange(desc(Freq)) %>%
mutate(VEP_cons_most_serious = gsub("_"," ", VEP_cons_most_serious))
coding_con$VEP_cons_most_serious <- factor(coding_con$VEP_cons_most_serious, levels = coding_con$VEP_cons_most_serious)
# Barplot
p <- ggplot(coding_con, aes(x = VEP_cons_most_serious, y = Freq)) +
geom_bar(stat = "identity", color = "black", fill = "firebrick") +
pretty_plot(fontsize=8) + L_border() +
labs(x = "", y = "Frequency") +
geom_text(data=coding_con,aes(label=Freq),vjust=-0.5, size=3) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(BuenColors)
library(cowplot)
# Barplot
p <- ggplot(coding_con, aes(x = VEP_cons_most_serious, y = Freq)) +
geom_bar(stat = "identity", color = "black", fill = "firebrick") +
pretty_plot(fontsize=8) + L_border() +
labs(x = "", y = "Frequency") +
geom_text(data=coding_con,aes(label=Freq),vjust=-0.5, size=3) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p
# Genomic annotations
x01_coding_gr <- rare_vars %>%  mutate(chr = paste0("chr",chr),start=pos,end=pos) %>%
filter(VEP_cons_most_serious %in% coding_consequences) %>% dplyr::select(chr,start,end) %>% distinct()%>% GRanges()
x02_promoter_gr <- bedToGRanges("../../data/annotations/Promoter_UCSC.fixed.bed")
library(GenomicRanges)
# Genomic annotations
x01_coding_gr <- rare_vars %>%  mutate(chr = paste0("chr",chr),start=pos,end=pos) %>%
filter(VEP_cons_most_serious %in% coding_consequences) %>% dplyr::select(chr,start,end) %>% distinct()%>% GRanges()
x02_promoter_gr <- bedToGRanges("../../data/annotations/Promoter_UCSC.fixed.bed")
x03_utr_gr <- bedToGRanges("../../data/annotations/UTR_3_UCSC.bed")
x04_atac_gr <- bedToGRanges("../../data/panHeme/29August2017_EJCsamples_allReads_500bp.bed")
x05_intron_gr <- bedToGRanges("../../data/annotations/Intron_UCSC.bed")
CS.gr <- rare_vars %>% mutate(chr = paste0("chr",chr),start=pos,end=pos) %>% dplyr::select(chr,start,end) %>% unique()%>% GRanges()
# Do overlaps
ov_1 <- findOverlaps(CS.gr, x01_coding_gr)
ov_2 <- findOverlaps(CS.gr, x02_promoter_gr)
ov_3 <- findOverlaps(CS.gr, x03_utr_gr)
ov_4 <- findOverlaps(CS.gr, x04_atac_gr)
ov_5 <- findOverlaps(CS.gr, x05_intron_gr)
# Classify each accessibility peak
classAll <- ifelse(1:length(CS.gr) %in% queryHits(ov_1), "coding",
ifelse(1:length(CS.gr) %in% queryHits(ov_2), "promoter",
ifelse(1:length(CS.gr) %in% queryHits(ov_3), "utr",
ifelse(1:length(CS.gr) %in% queryHits(ov_4), "accessible",
ifelse(1:length(CS.gr) %in% queryHits(ov_5), "intron", "intergenic")))))
table(classAll)*100/sum(table(classAll))
order <- c("coding", "promoter", "accessible", "intron","intergenic","utr")
totalDF <- data.frame(
what = order,
prop = as.numeric(table(classAll)[order]*100/sum(table(classAll)))
)
totalDF$what <- factor(totalDF$what,levels=order)
p2 <- ggplot(totalDF, aes(x = 1, y = prop)) +
geom_bar(stat="identity",aes(fill=what),position = position_stack(reverse = TRUE)) +
geom_text(aes(label = round(prop,1)), position = position_stack(vjust = 0.5 ), size = 3) +
scale_fill_manual(values = jdb_palette("brewer_spectra")[c(3,2,1,5,7,8)])+
scale_y_continuous(expand=c(0,0))+
coord_flip()+
pretty_plot(fontsize=8) + L_border() +
theme_void() +
theme(legend.position = "right",legend.title = element_blank())
p2
cowplot::ggsave2(p2, filename = "../..//output/rare_variants/rarevar_genomic_annotations.pdf", width = 6.5,height = 1.5)
# Read in VEP
vep_mostsevere <- fread("../../output/rare_variants/phewas/phewas_vep_most_severe.txt") %>% dplyr::rename("most_severe_consequence"=Consequence)
vep_all <- fread("../../output/rare_variants/phewas/phewas_vep_all.txt") %>%
dplyr::select(Location,BIOTYPE,SYMBOL,EXON,SIFT,PolyPhen,CADD_PHRED) %>% arrange(Location,desc(SIFT)) %>%
distinct(Location,.keep_all = T)
vep_combined <- merge(vep_mostsevere,vep_all,by="Location") %>% mutate(Location = gsub("-.*","",Location))
# How many SNP-blood trait associations have been previously reported?
gwas %>% filter(DISEASE.TRAIT %in% names(conversion)) %>%
left_join(.,dict, by = "DISEASE.TRAIT") %>% dplyr::select(-DISEASE.TRAIT) %>%
left_join(.,rare_vars[,c("rsid","pheno")],by=c("SNPS"="rsid")) %>%
filter(conversion == pheno) %>% .$SNPS %>% unique %>% length
rare_vars %>% .$var %>% unique %>% length()
# How many variants have previously unreported pheWAS associations?
gwas %>% filter(SNPS %in% phewas_table$ID) %>% dplyr::select(SNPS, DISEASE.TRAIT) %>%
filter(DISEASE.TRAIT %ni% dict$DISEASE.TRAIT) -> known_associations
# Then manually check how many of these associations are found in phewas_table
known_associations
phewas_table %>% filter(ID %in% known_associations$SNPS)
phewas_table %>% filter(pval < 5e-8) %>% dim()
head(phewas_table)
range(phewas_table$pval)
phewas_table$var %>% unique %>% length
phewas_table$pheno %>% unique %>% length
dim(phewas_table)
# How many variants have previously unreported pheWAS associations?
gwas %>% filter(SNPS %in% phewas_table$ID) %>% dplyr::select(SNPS, DISEASE.TRAIT) %>%
filter(DISEASE.TRAIT %ni% dict$DISEASE.TRAIT) -> known_associations
# Then manually check how many of these associations are found in phewas_table
known_associations
library(tidyverse)
library(GenomicRanges)
library(data.table)
library(BuenColors)
"%ni%" <- Negate("%in%")
cred_set <- fread("zcat < ../..data/finemap_bedfiles/ukbb_v2/credible_sets_all.txt.gz")
cred_set <- fread("zcat < ../..data/finemap_bedfiles/ukbb_v2/credible_sets_all.txt.gz")
cred_set
cred_set <- fread("zcat < ../..data/finemap_bedfiles/ukbb_v2/credible_sets_all.txt.gz")
cred_set
cred_set <- fread("zcat < ../..data/finemap_bedfiles/ukbb_v2/credible_sets_all.txt.gz")
