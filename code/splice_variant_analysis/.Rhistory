library(tidyverse)
library(GenomicRanges)
library(data.table)
library(BuenColors)
"%ni%" <- Negate("%in%")
cred_set <- fread("zcat < ../../data/finemap_bedfiles/ukbb_v2/credible_sets_all.txt.gz")
cred_set <- cred_set %>% group_by(trait,CS) %>% arrange(desc(PP)) %>% mutate(CS_rank = row_number()) %>% ungroup() %>% as.data.frame()
fwrite(cred_set, file = "../../data/finemap_bedfiles/ukbb_v2/credible_sets_all_with_ranks.txt.gz",compress = "auto")
CS.df <- fread("zcat < ../../data/finemap_bedfiles/ukbb_v2/CS.ukid.ukbb_v2.PP0.001.bed.gz") %>% filter(PP>0.001)
CS.df.ranks <- left_join(CS.df,cred_set[,c("var","trait","CS_rank")], by=c("rsid"="var","trait"="trait"))
fwrite(CS.df.ranks, file = "../../data/finemap_bedfiles/ukbb_v2/CS.ukid.ukbb_v2.PP0.001.with_ranks.bed.gz",compress = "auto")
# Read in variants
CS.df <- fread("zcat < ../../data/finemap_bedfiles/ukbb_v2/CS.ukid.ukbb_v2.PP0.001.bed.gz") %>% filter(PP>0.001)
cred_set <- fread("zcat < ../../data/finemap_bedfiles/ukbb_v2/credible_sets_all_with_ranks.txt.gz")
ukid_conversions <- fread("../../data/finemap_bedfiles/cred_set_rsids_ukids_ALL.txt") %>% group_by(rsid) %>%
filter(n() == 1) %>% ungroup()
cred_set_ukids <- merge(cred_set,ukid_conversions,by.x="var",by.y= "rsid") %>% dplyr::rename(rsid = "var")
ukid_conversions_combined <- bind_rows(CS.df[,c("rsid","UKID")],ukid_conversions) %>% unique()
format_splice_stats <- function(splice){
colnames(splice) <- as.character(splice[1,]) %>% gsub("=.*","",.)
colnames(splice)[1:5] <- c("var","chr","pos","ref","alt")
splice_reformatted <- cbind(splice[,1:5],apply(splice[,6:ncol(splice)], 2, function(y) gsub(".*=","",y)))
return(splice_reformatted)
}
# Subset just on delta score, without incorporating PP
make_splice_bed <- function(splice,delta=0.2){
splice_variants <- splice %>% filter(DS_AG > cutoff | DS_AL > cutoff | DS_DG > cutoff | DS_DL > cutoff)
splice_variants %>% mutate(end = pos) %>% dplyr::select(chr,pos,end,var) %>% arrange(chr,pos) %>% unique()
}
ukbb_splice <- fread("../data/splice_predictions/BCX_PP001.out.vcf")%>% format_splice_stats()
ukbb_cred_splice <- fread("../data/splice_predictions/BCX_ukbb_cred_set_vars.out.vcf")%>% format_splice_stats()
ukbb_splice <- fread("../../data/splice_predictions/BCX_PP001.out.vcf")%>% format_splice_stats()
ukbb_cred_splice <- fread("../../data/splice_predictions/BCX_ukbb_cred_set_vars.out.vcf")%>% format_splice_stats()
all_splice <- bind_rows(ukbb_splice,ukbb_cred_splice) %>% unique() %>% arrange(chr,pos)
cutoff <- 0.2
splice_bed <- all_splice %>% filter(DS_AG > cutoff | DS_AL > cutoff | DS_DG > cutoff | DS_DL > cutoff) %>%unique()
merged <- merge(splice_bed,ukid_conversions_combined[,c("UKID","rsid")],by.x="var",by.y="UKID") %>% dplyr::select(var,rsid,everything())
fwrite(merged,file="../../output/splice_predictions/splice_variants.ukbb.CS.delta0.2.tsv",sep="\t")
fwrite(merged,file="../../output/splice_predictions/splice_variants.ukbb.CS.delta0.2.tsv",sep="\t")
merged
nrow(merged)
# Merge with UKBB fine-mapping stats
all_splice$var %>% unique %>% length()
merged <- merge(all_splice,CS.df[,c("UKID","rsid","PP","AF_Allele2","trait")],by.x="var",by.y="UKID")
# Delta score of a variant ranges from 0 to 1, and can be interpreted as the probability of the variant being splice-altering. In the paper, a detailed characterization is provided for 0.2 (high recall/likely pathogenic), 0.5 (recommended/pathogenic), and 0.8 (high precision/pathogenic) cutoffs. Delta position conveys information about the location where splicing changes relative to the variant position (positive values are upstream of the variant, negative values are downstream).
cutoff <- 0.2
PP_threshold <- 0.5
splice_variants <- merged %>% filter(DS_AG > cutoff | DS_AL > cutoff | DS_DG > cutoff | DS_DL > cutoff) %>% arrange(desc(PP)) %>% dplyr::select(var,rsid,everything())
splice_variants$var %>% unique %>% length()
splice_variants$SYMBOL %>% unique %>% length()
# Annotate frame preserving vs. frame altering
# Acceptors: distance between canonical splice acceptor and newly created acceptor, multiple of 3?
# Donors: distance between canonical splice donor and newly created donor, multiple of 3?
frame <- splice_variants %>% group_by(var) %>% dplyr::slice(which.max(PP)) %>%
pivot_longer(data=.,cols=starts_with("DS"),names_to = "type",values_to = "delta") %>%
group_by(var) %>% dplyr::slice(which.max(delta)) %>% ungroup() %>% mutate(DIST = as.integer(DIST),frame = ifelse(DIST %% 3 == 0,"in-frame","frameshift"))
table(frame$frame)
frame %>% group_by(frame) %>% summarise(median(PP))
splice_variants <- splice_variants %>% left_join(.,frame[,c("var","frame")])
splice_variants %>% filter(frame == "in-frame")
highPP_splice_variants <- splice_variants %>% filter(PP> PP_threshold)
highPP_splice_variants$var %>% unique %>% length()
fwrite(splice_variants,file=paste0("../../output/splice_predictions/splice_variants.ukbb.PP001.delta",cutoff,".tsv"),sep="\t")
fwrite(highPP_splice_variants,file=paste0("../../output/splice_predictions/splice_variants.ukbb.PP50.delta",cutoff,".tsv"),sep="\t")
# How many are non-canonical splice variants?
splice_variants[,c("DIST","DP_AG","DP_AL","DP_DG","DP_DL")] <- data.matrix(splice_variants[,c("DIST","DP_AG","DP_AL","DP_DG","DP_DL")])
splice_variants %>% filter(abs(DIST) > 2) %>% .$var %>% unique() %>% length()
splice_variants %>% distinct(var,.keep_all = TRUE) %>% .$DIST %>% summary()
splice_variants %>% distinct(var,.keep_all = TRUE) %>% .$TYPE %>% table()
# How many splice alterations are frame-preserving vs. not?
distances <- splice_variants %>% distinct(var,.keep_all = TRUE) %>% .$DIST
distances %% 3 %>% table()
# Write table of all splice gene targets
if (FALSE){
write.table(splice_variants$SYMBOL %>% unique(),file="../output/splice_predictions/splice_genes_ukbb.delta0.2.PP001.tsv",quote = FALSE, sep = "\t", col.names = F, row.names = FALSE)
}
# Check for specific kinds of splice variants
splice_variants %>% filter(DS_AL > 0.8)
splice_variants %>% filter(DS_AG > 0.5)
splice_variants %>% filter(DS_DG > 0.2,PP > 0.01) %>% distinct(var,.keep_all = TRUE)
splice_variants %>% filter(DS_DL > 0.5)
cred_set %>% filter(CS=="rs7180484")
cred_set %>% filter(CS  == "rs112463197")
# KS test to determine if splice variants have higher PP and lower MAF
CS.df.PPmax <- CS.df %>% group_by(UKID) %>% dplyr::slice(which.max(PP)) %>%
ungroup() %>% arrange(PP) %>% mutate(rank = row_number(),type="all finemap",
MAF = ifelse(AF_Allele2 > 0.5, 1-AF_Allele2,AF_Allele2)) %>% dplyr::select(rank,PP,MAF,type)
splice_variants.PPmax <- splice_variants %>% group_by(var) %>% dplyr::slice(which.max(PP)) %>%
ungroup() %>% arrange(PP) %>% mutate(rank = row_number(), type="splice variants",
MAF = ifelse(AF_Allele2 > 0.5, 1-AF_Allele2,AF_Allele2))%>% dplyr::select(rank,PP,MAF,type)
ks.test(splice_variants.PPmax$PP,CS.df.PPmax$PP,alternative="two.sided")
ks.test(splice_variants.PPmax$MAF,CS.df.PPmax$MAF,alternative="two.sided")
wilcox.test(splice_variants.PPmax$MAF,CS.df.PPmax$MAF,alternative="two.sided")
wilcox.test(splice_variants.PPmax$PP,CS.df.PPmax$PP,alternative="two.sided")
max_merged <- bind_rows(CS.df.PPmax,splice_variants.PPmax)
# Compare PP
p1 <- ggplot(max_merged, aes(x=type,y=PP,fill=type)) +
geom_violin()+
scale_fill_manual(values = jdb_palette("brewer_spectra")[c(1,4)]) +
labs(x="") +
pretty_plot(fontsize=8) + L_border() +
theme(legend.position="none")
p1
# Compare MAF
p2 <- ggplot(max_merged, aes(x=type,y=MAF,fill=type)) +
geom_violin(draw_quantiles = c(0.25,0.5,0.75))+
scale_fill_manual(values = jdb_palette("brewer_spectra")[c(1,4)]) +
labs(x="") +
pretty_plot(fontsize=8) + L_border()+
theme(legend.position="none")
p2
# Density plots
ggplot(max_merged, aes(x=PP)) +
geom_density(aes(fill=type),alpha=0.4) +
scale_fill_manual(values=jdb_palette("brewer_spectra")[c(1,4)]) +
pretty_plot(fontsize = 8)+ L_border() +
labs(x="PP",y="Density") +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0))
p2 <- ggplot(max_merged, aes(x=MAF)) +
geom_density(aes(fill=type),alpha=0.4) +
scale_fill_manual(values=jdb_palette("brewer_spectra")[c(1,4)]) +
pretty_plot(fontsize = 8)+ L_border() +
labs(x="MAF",y="Density") +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0))
p2
cowplot::ggsave2(p1, file="../../output/splice_predictions/splice_variants_PP_distribution.pdf",width=2.5,height=2.5)
cowplot::ggsave2(p2, file="../../output/splice_predictions/splice_variants_MAF_distribution.pdf",width=3,height=2.5)
library(tidyverse)
library(data.table)
"%ni%" <- Negate("%in%")
# Read in 1000G dosages for all splice variants
allvariants <- fread("../../data/splice_predictions/1000GP3_files/splice_variants_europeans.dosages.raw") %>% dplyr::select(IID,contains("rs"))
allvariants_mat <- data.matrix(allvariants[,-1]); rownames(allvariants_mat) <- allvariants$IID
dim(allvariants_mat)
allvariants_mat[1:5,1:5]
# Take out UBASH3A common variant
splice_dosages <- fread("../../data/splice_predictions/1000GP3_files/splice_variants.dosages.raw") %>% dplyr::select(IID,contains("rs")) %>% dplyr::select(-c("rs1893592_C"))
splice_dosage_mat <- data.matrix(splice_dosages[,-1]); rownames(splice_dosage_mat) <- splice_dosages$IID
# Read in 1000G dosages for all splice variants
allvariants <- fread("../../data/splice_predictions/1000GP3_files/splice_variants_europeans.dosages.raw") %>% dplyr::select(IID,contains("rs"))
allvariants_mat <- data.matrix(allvariants[,-1]); rownames(allvariants_mat) <- allvariants$IID
dim(allvariants_mat)
allvariants_mat[1:5,1:5]
# Take out UBASH3A common variant
splice_dosages <- fread("../../data/splice_predictions/1000GP3_files/splice_variants.dosages.raw") %>% dplyr::select(IID,contains("rs")) %>% dplyr::select(-c("rs1893592_C"))
# Take out UBASH3A common variant
splice_dosages <- fread("../../data/splice_predictions/1000GP3_files/splice_variants_europeans.dosages.raw") %>% dplyr::select(IID,contains("rs")) %>% dplyr::select(-c("rs1893592_C"))
splice_dosage_mat <- data.matrix(splice_dosages[,-1]); rownames(splice_dosage_mat) <- splice_dosages$IID
# Check how many variants have genotype data
splice_variants <- fread("../../output/splice_predictions/splice_variants.ukbb.PP001.delta0.2.tsv")
intersect(gsub("_.*","",colnames(allvariants_mat)),splice_variants$rsid) %>% length()
variants_to_test <- data.frame(var = intersect(gsub("_.*","",colnames(allvariants_mat)),splice_variants$rsid))
variants_to_test
setdiff(gsub("_.*","",colnames(allvariants_mat)),splice_variants$rsid)  # One variant only from credible sets, not PP > 0.001
# Check how many variants have at least 1 carrier
table(colSums(allvariants_mat) > 0)
# Keep individuals who are a carrier for one or more variants
keep <- rowSums(allvariants_mat) > 0
table(keep)
allvariants_mat <- allvariants_mat[keep,]
# Pull fastq addresses and subset on only donors with RNA-seq data
fq <- fread("../data/splice_predictions/1000GP3_files/file_addresses.txt")
# Pull fastq addresses and subset on only donors with RNA-seq data
fq <- fread("../../data/splice_predictions/1000GP3_files/file_addresses.txt")
fq %>% filter(Donor %in% rownames(allvariants_mat)) %>% dim()
splice_carriers <- allvariants_mat[rownames(allvariants_mat) %in% fq$Donor,]
# Write table for each variant
variants <- colnames(splice_carriers)
sapply(colnames(splice_carriers),function(y){
subset <- splice_carriers[,y]
subset <- subset[subset > 0] %>% as.data.frame() %>% setNames(., "allele_count")
subset$ID <- rownames(subset)
fwrite(subset,paste0("../data/splice_predictions/carriers_with_rnaseq/",y,"_carriers_with_rnaseq.txt"),sep="\t")
return(nrow(subset))
})
sapply(colnames(splice_carriers),function(y){
subset <- splice_carriers[,y]
subset <- subset[subset > 0] %>% as.data.frame() %>% setNames(., "allele_count")
subset$ID <- rownames(subset)
fwrite(subset,paste0("../../data/splice_predictions/carriers_with_rnaseq/",y,"_carriers_with_rnaseq.txt"),sep="\t")
return(nrow(subset))
})
# Pull fastq address
fq <- fread("../../data/splice_predictions/1000GP3_files/file_addresses.txt")
carrier_fq <- fq %>% filter(Donor %in% rownames(splice_carriers))
dim(carrier_fq)
fwrite(carrier_fq,"../../data/splice_predictions/1000GP3_files/carrier_fastq_addresses.txt",sep="\t")
ids <- splice_variants %>% distinct(rsid,.keep_all = TRUE) %>%
dplyr::filter(rsid %in% variants_to_merge) %>% mutate(id = paste(rsid,alt,sep="_")) %>% .$id
all_individuals <- fread("../data/splice_predictions/1000GP3_files/file_addresses.txt")$Donor
# Pick variants to merge bam files across all carriers and non-carriers (separately)
variants_to_merge <- c("rs8113779","rs12898397","rs139178017")
# Read in all splice variants
splice_variants <- fread("../../output/splice_predictions/splice_variants.ukbb.PP001.delta0.2.tsv")
# Pick variants to merge bam files across all carriers and non-carriers (separately)
variants_to_merge <- c("rs8113779","rs12898397","rs139178017")
ids <- splice_variants %>% distinct(rsid,.keep_all = TRUE) %>%
dplyr::filter(rsid %in% variants_to_merge) %>% mutate(id = paste(rsid,alt,sep="_")) %>% .$id
all_individuals <- fread("../data/splice_predictions/1000GP3_files/file_addresses.txt")$Donor
all_individuals <- fread("../../data/splice_predictions/1000GP3_files/file_addresses.txt")$Donor
library(dplyr)
EBin <- read.table("../../output/splice_predictions/splice_variants.ukbb.trans.CS.delta0.2.tsv", header = TRUE)
df <- data.frame(chr = EBin$chr,
start = EBin$pos - 5000,
end = EBin$pos + 5000)
write.table(df, file = "../../output/extract164vars.bed", quote = FALSE, row.names = FALSE, col.names = FALSE, sep = "\t")
EBin <- read.table("../../output/splice_predictions/splice_variants.ukbb.trans.CS.delta0.2.tsv", header = TRUE)
# Read in 1000G dosages for all splice variants
allvariants <- fread("../../data/splice_predictions/1000GP3_files/splice_variants_europeans.dosages.raw") %>% dplyr::select(IID,contains("rs"))
# Check how many variants have genotype data
splice_variants <- fread("../../output/splice_predictions/splice_variants.ukbb.PP001.delta0.2.tsv")
# Import the leaf cutter data
lc_df <- fread("../../data/splice_predictions/all_GV_perind_numers.counts.gz")
library(SummarizedExperiment)
library(data.table)
library(GenomicRanges)
library(BSgenome.Hsapiens.UCSC.hg19)
library(tidyverse)
library(diffloop)
library(Matrix)
library(cowplot)
library(BuenColors)
"%ni%" <- Negate("%in%")
# Read in variant -> gene annotations
v_to_gene <- fread("../../data/gene_annotations/Condind_vars_and_pp_gt_0.5_with_clinical_annotation_20_11_19.txt") %>%
dplyr::rename(UKID="VAR",trait="pheno")
v50 <- v_to_gene %>% filter(gene != "") # Exclude intergenic variants
v50_core <- v50 %>% filter(BRIDGE_gene == "yes")
v50_peripheral <- v50 %>% filter(BRIDGE_gene == "no")
# Read in rare variants
rare_vars_v2 <- readxl::read_xlsx("../../data/ukbb-rare/annotations_rare_vars_updated.xlsx") %>% as_tibble()
# Read in full CS
CS.df <- fread("zcat < ../../data/finemap_bedfiles/ukbb_v2/CS.ukid.ukbb_v2.PP0.001.bed.gz") %>% filter(PP>0.5)
# See if rare variants are enriched for being near core genes
gene_set <- v50_core
bridge_rare <- v_to_gene %>% filter(UKID %in% rare_vars_v2$var, UKID %in% gene_set$UKID) %>% .$UKID %>% unique() %>% length()
nobridge_rare <- v_to_gene %>% filter(UKID %in% rare_vars_v2$var,UKID %ni% gene_set$UKID) %>% .$UKID %>% unique() %>% length()
bridge_norare <- gene_set %>% filter(UKID %ni% rare_vars_v2$var) %>% .$UKID %>% unique() %>% length()
nobridge_norare <- v_to_gene %>% filter(UKID %ni% c(rare_vars_v2$var,gene_set$UKID)) %>% .$UKID %>% unique() %>% length()
counts <- c("br"=bridge_rare,"no_b_r"=nobridge_rare,"b_no_r"=bridge_norare,"no_b_no_r"=nobridge_norare)
counts
fisher.test(matrix(counts, nrow = 2))
# Exclude known pathogenic variants, re-assess enrichment
known_path <- readxl::read_xlsx("../../data/gene_annotations/T1_Known_variants_associated_penetrance_in_ukbb.xlsx") %>% .$Variant %>% unique
library(SummarizedExperiment)
library(data.table)
library(GenomicRanges)
library(BSgenome.Hsapiens.UCSC.hg19)
library(tidyverse)
library(diffloop)
library(Matrix)
library(cowplot)
library(BuenColors)
"%ni%" <- Negate("%in%")
# Read in ATAC data
peaksdf <- fread("../../data/panHeme/29August2017_EJCsamples_allReads_500bp.bed")
peaks <- makeGRangesFromDataFrame(peaksdf, seqnames = "V1", start.field = "V2", end.field = "V3")
counts <-  data.matrix(fread("../../data/panHeme/29August2017_EJCsamples_allReads_500bp.counts.txt"))
cpm <- round(sweep(counts, 2, colSums(counts), FUN="/") * 1000000, 1)
log2cpm <- log2(cpm+1)
# Min / max scale
log2cpm.minmax <- log2cpm / rowMax(log2cpm)
# Exclude variants with coding consequences
coding_consequences <- c("missense_variant","synonymous_variant","frameshift_variant",
"splice_acceptor_variant","splice_donor_variant","splice_region_variant",
"inframe_insertion","stop_gained","stop_retained_variant",
"start_lost","stop_lost","coding_sequence_variant","incomplete_terminal_codon_variant")
# Read in merged gene / CS data
CS.df.merged <- fread("../../data/VEP/CS.ukid.ukbb_v2.VEP_merged.bed")%>%  mutate(chr = paste0("chr",chr)) %>%
filter(Consequence %ni% coding_consequences) %>% dplyr::rename(gene = "SYMBOL")
CS.gr <- GRanges(CS.df.merged)
# Read in merged gene / CS data
CS.df.merged <- fread("../../data/VEP/CS.ukid.ukbb_v2.VEP_merged.bed")%>%  mutate(chr = paste0("chr",chr)) %>%
filter(Consequence %ni% coding_consequences) %>% dplyr::rename(gene = "SYMBOL")
CS.df.merged <- fread("../../data/VEP/CS.ukid.ukbb_v2.VEP_merged.bed")
head(CS.df.merged)
fread("../../data/VEP/CS.ukid.ukbb_v2.VEP_merged.bed")%>%  mutate(chr = paste0("chr",chr)) %>%
filter(Consequence %ni% coding_consequences)
fread("../../data/VEP/CS.ukid.ukbb_v2.VEP_merged.bed")%>%  mutate(chr = paste0("chr",chr)) %>%
filter(Consequence %ni% coding_consequences) %>% dplyr::rename(gene = "SYMBOL")
fread("../../data/VEP/CS.ukid.ukbb_v2.VEP_merged.bed")%>%  mutate(chr = paste0("chr",chr)) %>%
filter(Consequence %ni% coding_consequences)
# Read in merged gene / CS data
CS.df.merged <- fread("../../data/VEP/CS.ukid.ukbb_v2.VEP_merged.bed")%>%  mutate(chr = paste0("chr",chr)) %>%
filter(Consequence %ni% coding_consequences)
CS.gr <- GRanges(CS.df.merged)
# Find overlaps between peaks and all rare variants
idx <- findOverlaps(peaks,CS.gr)
# Construct overlap data.frame and granges with peaks, cpm, and finemap info
atac_overlap <- data.frame(
CS.df.merged[idx@to,c("UKID","trait","PP","gene","BRIDGE")],
log2cpm[idx@from,]
)
atac_overlap_long <- atac_overlap %>% pivot_longer(.,cols = -c("UKID","trait","PP","gene","BRIDGE"),names_to="celltype",values_to = "log2cpm")
# Gene vs. no gene
bridge_rare <- CS.df.merged %>% filter(UKID %in% atac_overlap$UKID, gene != "") %>% .$UKID %>% unique() %>% length()
nobridge_rare <- CS.df.merged %>% filter(UKID %in% atac_overlap$UKID,gene == "") %>% .$UKID %>% unique() %>% length()
bridge_norare <- CS.df.merged %>% filter(gene != "",UKID %ni% atac_overlap$UKID) %>% .$UKID %>% unique() %>% length()
nobridge_norare <- CS.df.merged %>% filter(gene == "",UKID %ni% atac_overlap$UKID)  %>% .$UKID %>% unique() %>% length()
counts <- c("br"=bridge_rare,"no_b_r"=nobridge_rare,"b_no_r"=bridge_norare,"no_b_no_r"=nobridge_norare)
counts
fisher.test(matrix(counts, nrow = 2))
# Cell type specific analysis
bridge <- fread("../../data/conditional_ind_variants/bridge_genes.txt")
# Load motifbreakr data
mbreaker.df <- fread("zcat < ../gwas_data/ukbb_mbreaker_finemap_merged.txt.gz")
# Load motifbreakr data
mbreaker.df <- fread("zcat < ../../data/gwas_data/ukbb_mbreaker_finemap_merged.txt.gz")
# Load finemap data and filter for PP>0.5
CS.df <- fread(cmd="zcat < ../../data/finemap_bedfiles/ukbb_v2/CS.ukid.ukbb_v2.PP0.001.bed.gz") %>% filter(PP>0.5)
# Read in Dragana's VEP worst consequence gene annotations for condind and/or PP>0.5 variants
v_to_gene <- fread("../../data/gene_annotations/Condind_vars_and_pp_gt_0.5_with_clinical_annotation_20_11_19.txt") %>%
dplyr::rename(UKID="VAR",trait="pheno")  %>% filter(PP %ni% c("<0.5"),VEP_cons_most_serious %ni% coding_consequences)
v_to_gene[is.na(v_to_gene)] <- ""
v_to_gene <- v_to_gene %>% mutate(intergenic_or_not = ifelse(gene == "","intergenic","genic")) %>%
mutate(VEP_cons_most_serious = ifelse(VEP_cons_most_serious=="","intergenic_variant",VEP_cons_most_serious)) %>% unique()
all.CS_merged.gene <- merge(all.CS_merged,v_to_gene[,c("UKID","trait","beta","SD","VEP_cons_most_serious","gene","BRIDGE_gene","condind","intergenic_or_not")],by=c("UKID","trait"))
# Merge finemap with deltaSVM
all.CS_merged <- left_join(CS.df[,c("UKID","trait","PP","AF_Allele2")],all,by=c("UKID"="var")) %>% unique()
# Stratify on type of disease caused by core genes
core_genes <- fread("../../data/gene_annotations/bridge_genes.txt")
BMF_genes <- core_genes %>% filter(Platform == "BMF") %>% .$Gene_Symbol_HGNC
BPD_genes <- core_genes %>% filter(Platform == "BPD") %>% .$Gene_Symbol_HGNC
SMD_genes <- core_genes %>% filter(Platform == "SMD") %>% .$Gene_Symbol_HGNC
all.CS_merged.gene %>% filter(gene %in% BPD_genes) %>% group_by(celltype) %>%
summarise(median(abs(deltaSVM))) %>% as.data.frame()
# Load motifbreakr data
mbreaker.df <- fread("zcat < ../../output/ukbb_mbreaker_finemap_merged.txt.gz")
# Load core BRIDGE flagship genes
core_genes <- read.table("../../data/gene_annotations//BRIDGE_Flagship_gene_list.txt")[,1]
peripheral_genes <- read.table("../../data/gene_annotations//List_gwas_genes_by_VEP_with_intergenic.txt")[,1]
peripheral_genes <- read.table("../../data/gene_annotations//List_gwas_genes_by_VEP_with_intergenic.txt")[,1]
peripheral_genes <- peripheral_genes[complete.cases(peripheral_genes)]
peripheral_genes <- setdiff(peripheral_genes,core_genes)
intersect(core_genes,peripheral_genes)
# Read in Dragana's VEP worst consequence gene annotations for condind and/or PP>0.5 variants
v_to_gene <- fread("../../data/gene_annotations/Condind_vars_and_pp_gt_0.5_with_clinical_annotation_20_11_19.txt") %>%
dplyr::rename(UKID="VAR",trait="pheno")
v50 <- v_to_gene %>% filter(PP %ni% c("<0.5"))
v50_core <- v50 %>% filter(BRIDGE_gene == "yes")
# See if motif disrupting variants are enriched for being near core genes
CS.df <- fread("../../data/finemap_bedfiles/ukbb_v1/bcx.CS.df")
names(CS.df) <- c("seqnames","start","end","UKID","PP","region","trait")
bridge_motif <- mbreaker.df %>% filter(PP > 0.5, UKID %in% v50_core$UKID) %>% .$UKID %>% unique() %>% length()
nobridge_motif <- mbreaker.df %>% filter(PP > 0.5, UKID %ni% v50_core$UKID) %>% .$UKID %>% unique() %>% length()
bridge_nomotif <- v50_core %>% filter(UKID %ni% mbreaker.df$UKID) %>% .$UKID %>% unique() %>% length()
nobridge_nomotif <- CS.df %>% filter(PP > 0.5,UKID %ni% c(mbreaker.df$UKID,v50_core$UKID)) %>% .$UKID %>% unique() %>% length()
counts <- c("bm"=bridge_motif,"no_b_m"=nobridge_motif,"b_no_m"=bridge_nomotif,"no_b_no_m"=nobridge_nomotif)
counts
fisher.test(matrix(counts, nrow = 2))
library(SummarizedExperiment)
library(data.table)
library(GenomicRanges)
library(BSgenome.Hsapiens.UCSC.hg19)
library(tidyverse)
library(diffloop)
library(Matrix)
library(cowplot)
library(BuenColors)
"%ni%" <- Negate("%in%")
# Read in ATAC data
peaksdf <- fread("../../data/panHeme/29August2017_EJCsamples_allReads_500bp.bed")
peaks <- makeGRangesFromDataFrame(peaksdf, seqnames = "V1", start.field = "V2", end.field = "V3")
counts <-  data.matrix(fread("../../data/panHeme/29August2017_EJCsamples_allReads_500bp.counts.txt"))
cpm <- round(sweep(counts, 2, colSums(counts), FUN="/") * 1000000, 1)
log2cpm <- log2(cpm+1)
# Min / max scale
log2cpm.minmax <- log2cpm / rowMax(log2cpm)
# Exclude variants with coding consequences
coding_consequences <- c("missense_variant","synonymous_variant","frameshift_variant",
"splice_acceptor_variant","splice_donor_variant","splice_region_variant",
"inframe_insertion","stop_gained","stop_retained_variant",
"start_lost","stop_lost","coding_sequence_variant","incomplete_terminal_codon_variant")
# Read in merged gene / CS data
CS.df.merged <- fread("../../data/VEP/CS.ukid.ukbb_v2.VEP_merged.bed")%>%  mutate(chr = paste0("chr",chr)) %>%
filter(Consequence %ni% coding_consequences)
CS.gr <- GRanges(CS.df.merged)
# Find overlaps between peaks and all rare variants
idx <- findOverlaps(peaks,CS.gr)
# Construct overlap data.frame and granges with peaks, cpm, and finemap info
atac_overlap <- data.frame(
CS.df.merged[idx@to,c("UKID","trait","PP","gene","BRIDGE")],
log2cpm[idx@from,]
)
atac_overlap_long <- atac_overlap %>% pivot_longer(.,cols = -c("UKID","trait","PP","gene","BRIDGE"),names_to="celltype",values_to = "log2cpm")
# Gene vs. no gene
bridge_rare <- CS.df.merged %>% filter(UKID %in% atac_overlap$UKID, gene != "") %>% .$UKID %>% unique() %>% length()
nobridge_rare <- CS.df.merged %>% filter(UKID %in% atac_overlap$UKID,gene == "") %>% .$UKID %>% unique() %>% length()
bridge_norare <- CS.df.merged %>% filter(gene != "",UKID %ni% atac_overlap$UKID) %>% .$UKID %>% unique() %>% length()
nobridge_norare <- CS.df.merged %>% filter(gene == "",UKID %ni% atac_overlap$UKID)  %>% .$UKID %>% unique() %>% length()
counts <- c("br"=bridge_rare,"no_b_r"=nobridge_rare,"b_no_r"=bridge_norare,"no_b_no_r"=nobridge_norare)
counts
fisher.test(matrix(counts, nrow = 2))
counts
# Cell type specific analysis
bridge <- fread("../../data/conditional_ind_variants/bridge_genes.txt")
# Cell type specific analysis
bridge <- fread("../../data/gene_annotations//bridge_genes.txt")
table(bridge$Platform)
BMF_genes <- bridge %>% filter(Platform == "BMF") %>% .$Gene_Symbol_HGNC
BPD_genes <- bridge %>% filter(Platform == "BPD") %>% .$Gene_Symbol_HGNC
SMD_genes <- bridge %>% filter(Platform == "SMD") %>% .$Gene_Symbol_HGNC
gene_atac_merged %>% filter(gene %in% BPD_genes) %>% group_by(celltype) %>% summarise(mean(log2cpm))
gene_atac_merged %>% filter(gene %in% BMF_genes) %>% group_by(celltype) %>% summarise(mean(log2cpm))
gene_atac_merged <- merge(atac_overlap_long,v_to_gene[,c("UKID","VEP_cons_most_serious","gene")],by="UKID")
gene_atac_merged %>% filter(gene %in% BPD_genes) %>% group_by(celltype) %>% summarise(mean(log2cpm))
head(gene_atac_merged)
v_to_gene <- fread("../../data/gene_annotations/Condind_vars_and_pp_gt_0.5_with_clinical_annotation_20_11_19.txt") %>%
dplyr::rename(UKID="VAR",trait="pheno")  %>% filter(PP %ni% c("<0.5"), VEP_cons_most_serious %ni% coding_consequences)
gene_atac_merged <- merge(atac_overlap_long,v_to_gene[,c("UKID","VEP_cons_most_serious","gene")],by="UKID")
head(gene_atac_merged)
head(gene_atac_merged)
head(atac_overlap_long)
gene_atac_merged <- merge(atac_overlap_long,v_to_gene[,c("UKID","VEP_cons_most_serious")],by="UKID")
gene_atac_merged %>% filter(gene %in% BPD_genes) %>% group_by(celltype) %>% summarise(mean(log2cpm))
gene_atac_merged %>% filter(gene %in% BMF_genes) %>% group_by(celltype) %>% summarise(mean(log2cpm))
gene_atac_merged %>% filter(gene %in% SMD_genes) %>% group_by(celltype) %>% summarise(mean(log2cpm))
# Core vs. peripheral
bridge_rare <- CS.df.merged %>% filter(UKID %in% atac_overlap$UKID, BRIDGE == "yes") %>% .$UKID %>% unique() %>% length()
nobridge_rare <- CS.df.merged %>% filter(UKID %in% atac_overlap$UKID,BRIDGE == "no") %>% .$UKID %>% unique() %>% length()
bridge_norare <- CS.df.merged %>% filter(BRIDGE == "yes",UKID %ni% atac_overlap$UKID) %>% .$UKID %>% unique() %>% length()
nobridge_norare <- CS.df.merged %>% filter(BRIDGE == "no",UKID %ni% atac_overlap$UKID)  %>% .$UKID %>% unique() %>% length()
counts <- c("br"=bridge_rare,"no_b_r"=nobridge_rare,"b_no_r"=bridge_norare,"no_b_no_r"=nobridge_norare)
counts
chisq.test(matrix(counts, nrow = 2))
v50_core
# Cell type specific analysis
bridge <- fread("../../data/gene_annotations//bridge_genes.txt")
table(bridge$Platform)
BMF_genes <- bridge %>% filter(Platform == "BMF") %>% .$Gene_Symbol_HGNC
BPD_genes <- bridge %>% filter(Platform == "BPD") %>% .$Gene_Symbol_HGNC
SMD_genes <- bridge %>% filter(Platform == "SMD") %>% .$Gene_Symbol_HGNC
gene_atac_merged %>% filter(gene %in% BPD_genes) %>% group_by(celltype) %>% summarise(mean(log2cpm))
gene_atac_merged %>% filter(gene %in% BMF_genes) %>% group_by(celltype) %>% summarise(mean(log2cpm))
gene_atac_merged %>% filter(gene %in% SMD_genes) %>% group_by(celltype) %>% summarise(mean(log2cpm))
# Read in variant -> gene annotations
v_to_gene <- fread("../../gkmer-svm-pipeline/gwas_data/Condind_vars_and_pp_gt_0.5_with_clinical_annotation_20_11_19.txt") %>%
dplyr::rename(UKID="VAR",trait="pheno")  %>% filter(PP %ni% c("<0.5"), VEP_cons_most_serious %ni% coding_consequences)
# Read in variant -> gene annotations
v50 <- v_to_gene %>% filter(gene != "") # Exclude intergenic variants
v50_core <- v50 %>% filter(BRIDGE_gene == "yes")
v50_peripheral <- v50 %>% filter(BRIDGE_gene == "no")
# Read in Finemap data
CS.df <- fread("zcat < ../data/finemap_bedfiles/ukbb_v2/CS.ukid.ukbb_v2.PP0.001.bed.gz") %>%  mutate(chr = paste0("chr",chr)) %>%
filter(PP>0.5)
# Read in Finemap data
CS.df <- fread("zcat < ../../data/finemap_bedfiles/ukbb_v2/CS.ukid.ukbb_v2.PP0.001.bed.gz") %>%  mutate(chr = paste0("chr",chr)) %>%
filter(PP>0.5)
CS.gr <- GRanges(CS.df)
# Merge atac overlap with gene annotations
gene_atac_merged <- merge(atac_overlap_long,v_to_gene[,c("UKID","VEP_cons_most_serious","gene")],by="UKID")
# See if atac variants are enriched for being near core genes
gene_set <- v50
bridge_atac <- gene_set %>% filter(UKID %in% atac_overlap$UKID) %>% .$UKID %>% unique() %>% length()
nobridge_atac <- v_to_gene %>% filter(UKID %in% atac_overlap$UKID,UKID %ni% gene_set$UKID) %>% .$UKID %>% unique() %>% length()
bridge_noatac <- gene_set %>% filter(UKID %ni% atac_overlap$UKID) %>% .$UKID %>% unique() %>% length()
nobridge_noatac <- v_to_gene %>% filter(UKID %ni% c(atac_overlap$UKID,gene_set$UKID)) %>% .$UKID %>% unique() %>% length()
counts <- c("bm"=bridge_atac,"no_b_m"=nobridge_atac,"b_no_m"=bridge_noatac,"no_b_no_m"=nobridge_noatac)
counts
fisher.test(matrix(counts, nrow = 2))
# Core vs. peripheral enrichment near core genes
bridge_rare <- CS.df.merged %>% filter(UKID %in% atac_overlap$UKID, BRIDGE == "yes") %>% .$UKID %>% unique() %>% length()
nobridge_rare <- CS.df.merged %>% filter(UKID %in% atac_overlap$UKID,BRIDGE == "no") %>% .$UKID %>% unique() %>% length()
bridge_norare <- CS.df.merged %>% filter(BRIDGE == "yes",UKID %ni% atac_overlap$UKID) %>% .$UKID %>% unique() %>% length()
nobridge_norare <- CS.df.merged %>% filter(BRIDGE == "no",UKID %ni% atac_overlap$UKID)  %>% .$UKID %>% unique() %>% length()
counts <- c("br"=bridge_rare,"no_b_r"=nobridge_rare,"b_no_r"=bridge_norare,"no_b_no_r"=nobridge_norare)
counts
chisq.test(matrix(counts, nrow = 2))
head(v50)
head(atac_overlap)
